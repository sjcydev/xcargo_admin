generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MetodoPago {
  transferencia
  efectivo
  yappy
  tarjeta
  nulo
}

enum Roles {
  ADMIN
  SECRETARIA
  EMPLEADO
}

enum TipoDeCliente {
  CORPORATIVO
  REGULAR
  ESPECIAL
  MARITIMO
}

model Usuarios {
  id         Int           @id @default(autoincrement())
  nombre     String
  apellido   String?
  correo     String
  cedula     String?
  telefono   String?
  codigo     String?
  compania   String?
  nacimiento DateTime      @default(now())
  sexo       String        @default("otros")
  precio     Float         @default(2.75)
  casillero  Int?          @db.UnsignedInt
  tipo       TipoDeCliente @default(REGULAR)
  createdAt  DateTime      @default(now())
  sucursal   String?       @default("Chorrera")
  facturas   Facturas[]
}

model Facturas {
  factura_id     Int         @id @default(autoincrement())
  casillero      Int
  fecha          String
  pagado         Boolean     @default(false)
  cliente        Usuarios    @relation(fields: [casillero], references: [id])
  trackings      Trackings[]
  total          Float       @default(0) @db.Float
  metodo_de_pago MetodoPago  @default(nulo)
  createdAt      DateTime    @default(now())
  pagadoAt       DateTime?
  retirados      Boolean     @default(false)

  @@index([casillero], map: "Facturas_casillero_fkey")
}

model Reportes {
  reporte_id     Int      @id @default(autoincrement())
  fechaInicial   DateTime
  fechaFinal     DateTime
  facturas       Int
  total          Float
  metodo_de_pago Json
}

model Trackings {
  tracking_id     Int      @id @default(autoincrement())
  factura_id      Int
  numero_tracking String   @db.Text
  peso            Int
  base            Float
  precio          Float
  retirado        Boolean  @default(false)
  factura         Facturas @relation(fields: [factura_id], references: [factura_id])
  createdAt       DateTime @default(now())

  @@index([factura_id], map: "Trackings_factura_id_fkey")
}

model AuthUser {
  id               String        @id @unique
  username         String        @unique
  correo           String        @unique
  nombre           String
  apellido         String
  password_updated Boolean       @default(false)
  rol              Roles         @default(EMPLEADO)
  auth_key         AuthKey[]
  auth_session     AuthSession[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
